{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","resolve","reject","get","then","console","log","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","Error","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n    constructor(){\n        this._http = new HttpService();\n    }\n\n    obterNegociacoesDaSemana(){\n\n        return new Promise ((resolve, reject) => {\n            this._http\n                .get('negociacoes/semana')\n                .then(negociacoes => {\n                    console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana');\n                })\n        });\n    }\n\n    obterNegociacoesDaSemanaAnterior(){\n\n        return new Promise ((resolve, reject) => {\n            this._http\n                .get('negociacoes/anterior')\n                .then(negociacoes => {\n                    console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana anterior');\n                })\n        });\n    }\n\n    obterNegociacoesDaSemanaRetrasada(){\n\n        return new Promise ((resolve, reject) => {\n            this._http\n                .get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana retrasada');\n                })\n        });\n    }\n\n    obterNegociacoes() {\n\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), []);\n\n            return negociacoes;\n\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n\n    }\n\n    cadastra(negociacao){\n        return ConnectionFactory\n                .getConnection()\n                .then(connection => new NegociacaoDao(connection))\n                .then(dao => dao.adiciona(negociacao))\n                .then(() => 'Negociação adicionada com sucesso')\n                .catch(erro => {\n                    console.log(erro);\n                    throw new Error('Não foi possível adicionar a negociação')\n                });\n    }\n\n    lista(){\n        return ConnectionFactory\n                .getConnection()\n                .then(connection => new NegociacaoDao(connection))\n                .then(dao => dao.listaTodos())\n                .catch(erro => {\n                    console.log(erro);\n                    throw new Error('Não foi possível obter as negociações');\n                })\n    }\n\n    apaga(){\n        return ConnectionFactory\n                .getConnection()\n                .then(connection => new NegociacaoDao(connection))\n                .then(dao => dao.apagaTodos())\n                .then(() => 'Negociações apagadas com sucesso')\n                .catch(erro => {\n                    console.log(erro);\n                    throw new Error('Não foi possível apagar negociações');\n                });\n    }\n\n    importa(listaAtual) {\n        return this.obterNegociacoes()\n            .then(negociacoes => \n                negociacoes.filter(negociacao => \n                    !listaAtual.some(negociacaoExistente => \n                        negociacao.isEquals(negociacaoExistente)))\n            )\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível importar negociações');\n            });\n    }\n}"]}