{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["STORES","VERSION","DBNAME","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createConnection","e","target","result","onsuccess","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;;;;;;;iDAEG;AACR,8BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;oDAEqB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;AACAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,iBAAlB,CAAoCC,EAAEC,MAAF,CAASC,MAA7C;AACH,6BAFD;AAGAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAG,CAAChB,UAAJ,EAAe;AACXA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAnB;AACAD,+CAAWC,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BATD;AAUAO,wCAAYU,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYN,EAAEC,MAAF,CAASM,KAArB;AACAd,uCAAOO,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBAnBM,CAAP;AAoBH;;;sDAEwBrB,U,EAAW;AAChCH,+BAAOyB,OAAP,CAAe,iBAAS;AACpB,gCAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7CzB,2CAAW0B,iBAAX,CAA6BD,KAA7B;AACH;AACDzB,uCAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBALD;AAMH;;;sDAEuB;AACpB,4BAAG5B,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const STORES = ['negociacoes'];\nconst VERSION = 4;\nconst DBNAME = 'aluraframe';\n\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory {\n\n    contructor(){\n        throw new Error('Não é possível criar instâncias de ConnectionFactory');\n    }\n    \n    static getConnection(){\n        return new Promise((resolve, reject) => {\n            let openRequest = window.indexedDB.open(DBNAME, VERSION);\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createConnection(e.target.result);\n            };\n            openRequest.onsuccess = e => {\n                if(!connection){\n                    connection = e.target.result;\n                    close = connection.close;\n                    connection.close = function() {\n                        throw new Error('A conexão não pode ser fechada diretamente.');\n                    };\n                }\n                resolve(connection);\n            };\n            openRequest.onerror = e => {\n                console.log(e.target.error);\n                reject(e.target.error.name);\n            };\n        });\n    }\n\n    static _createConnection(connection){\n        STORES.forEach(store => {\n            if (connection.objectStoreNames.contains(store)) {\n                connection.deleteObjectStore(store);\n            }\n            connection.createObjectStore(store, { autoIncrement: true});\n        });\n    }\n\n    static closeConnection(){\n        if(connection){\n            close;\n            connection = null;\n        }\n    }\n}"]}