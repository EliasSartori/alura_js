{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","STORES","VERSION","DBNAME","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createConnection","e","target","result","onsuccess","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;AACjC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yCAEgB;AACR,sBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;AAJL;AAAA;AAAA,4CAM0B;AAClB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;AACAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,iBAAlB,CAAoCC,EAAEC,MAAF,CAASC,MAA7C;AACH,qBAFD;AAGAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAG,CAACf,UAAJ,EAAe;AACXA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAnB;AACAD,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBATD;AAUAM,gCAAYU,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYN,EAAEC,MAAF,CAASM,KAArB;AACAd,+BAAOO,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBAnBM,CAAP;AAoBH;AA3BL;AAAA;AAAA,8CA6B6BpB,UA7B7B,EA6BwC;AAChCH,uBAAOwB,OAAP,CAAe,iBAAS;AACpB,wBAAIrB,WAAWsB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7CxB,mCAAWyB,iBAAX,CAA6BD,KAA7B;AACH;AACDxB,+BAAW0B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBALD;AAMH;AApCL;AAAA;AAAA,8CAsC4B;AACpB,oBAAG3B,UAAH,EAAc;AACVC;AACAD,iCAAa,IAAb;AACH;AACJ;AA3CL;;AAAA;AAAA;AA6CH,CArDuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["let ConnectionFactory = (function () {\n    const STORES = ['negociacoes'];\n    const VERSION = 4;\n    const DBNAME = 'aluraframe';\n\n    let connection = null;\n    let close = null;\n    \n    return class ConnectionFactory {\n    \n        contructor(){\n            throw new Error('Não é possível criar instâncias de ConnectionFactory');\n        }\n        \n        static getConnection(){\n            return new Promise((resolve, reject) => {\n                let openRequest = window.indexedDB.open(DBNAME, VERSION);\n                openRequest.onupgradeneeded = e => {\n                    ConnectionFactory._createConnection(e.target.result);\n                };\n                openRequest.onsuccess = e => {\n                    if(!connection){\n                        connection = e.target.result;\n                        close = connection.close;\n                        connection.close = function() {\n                            throw new Error('A conexão não pode ser fechada diretamente.');\n                        };\n                    }\n                    resolve(connection);\n                };\n                openRequest.onerror = e => {\n                    console.log(e.target.error);\n                    reject(e.target.error.name);\n                };\n            });\n        }\n    \n        static _createConnection(connection){\n            STORES.forEach(store => {\n                if (connection.objectStoreNames.contains(store)) {\n                    connection.deleteObjectStore(store);\n                }\n                connection.createObjectStore(store, { autoIncrement: true});\n            });\n        }\n\n        static closeConnection(){\n            if(connection){\n                close;\n                connection = null;\n            }\n        }\n    }\n})();\n"]}